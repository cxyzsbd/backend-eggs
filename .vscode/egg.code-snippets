{
  //controller快捷模板
  "controller-template": {
    "prefix": "controller-template",
    "body": [
      "'use strict';",
      "",
      "const BaseController = require('../base-controller')",
      "",
      "/**",
      "* @controller 对象 objects",
      "*/",
      "",
      "class ObjectController extends BaseController {",
      "  /**",
      "  * @apikey",
      "  * @summary 对象列表",
      "  * @description 获取所有对象",
      "  * @request query string name",
      "  * @request query number pageSize",
      "  * @request query number pageNumber",
      "  * @router get objects",
      "  */",
      "  async findAll() {",
      "    const { ctx, service } = this;",
      "    const { allRule, query } = this.findAllParamsDeal({",
      "      rule: ctx.rule.objectsPutBodyReq,",
      "      queryOrigin: ctx.query,",
      "    });",
      "    ctx.validate(allRule, query);",
      "    const res = await service.objects.findAll(query);",
      "    this.SUCCESS({res})",
      "  }",
      "",
      "  /**",
      "  * @apikey",
      "  * @summary 获取某个 对象",
      "  * @description 获取某个 对象",
      "  * @router get objects/:id",
      "  * @request path number *id eg:1",
      "  */",
      "  async findOne() {",
      "    const { ctx, service } = this;",
      "    ctx.validate(ctx.rule.objectId, ctx.params);",
      "    const res = await service.objects.findOne(ctx.params.id);",
      "    res ? this.SUCCESS({ res }) : this.NOT_FOUND();",
      "  }",
      "",
      "  /**",
      "  * @apikey",
      "  * @summary 创建 对象",
      "  * @description 创建 对象",
      "  * @router post objects",
      "  * @request body objectsBodyReq",
      "  */",
      "  async create() {",
      "    const ctx = this.ctx;",
      "    ctx.validate(ctx.rule.objectsBodyReq, ctx.request.body);",
      "    await ctx.service.objects.create(ctx.request.body);",
      "    this.CREATED_UPDATE();",
      "  }",
      "",
      "  /**",
      "  * @apikey",
      "  * @summary 更新 对象",
      "  * @description 更新 对象",
      "  * @router put objects/:id",
      "  * @request path number *id eg:1",
      "  * @request body objectsPutBodyReq",
      "  */",
      "  async update() {",
      "    const { ctx, service } = this;",
      "    const params = {...ctx.params, ...ctx.request.body}",
      "    ctx.validate(ctx.rule.objectsPutBodyReq, params);",
      "    const res = await service.objects.update(params);",
      "    res && res[0] !== 0 ? this.CREATED_UPDATE() : this.NOT_FOUND();",
      "  }",
      "",
      "  /**",
      "  * @apikey",
      "  * @summary 删除 对象",
      "  * @description 删除 对象",
      "  * @router delete objects/:id",
      "  * @request path number *id eg:1",
      "  */",
      "  async destroy() {",
      "    const { ctx, service } = this;",
      "    ctx.validate(ctx.rule.objectsDelBodyReq, ctx.params);",
      "    const res = await service.objects.destroy(ctx.params);",
      "    res ? this.NO_CONTENT() : this.NOT_FOUND();",
      "  }",
      "}",
      "",
      "module.exports = ObjectController;"
    ]
  },
  //console.log快捷模板
  "con": {
    "prefix": "dy",
    "body": "console.log('打印===============',content)"
  },
  //swagger路由快捷注释
  "swagger-notes": {
    "prefix": "swagger-notes",
    "body": [
      "/**",
      "* @apikey",
      "* @summary router_name",
      "* @description desc",
      "* @router method router",
      "* @request body requestBody",
      "*/",
    ]
  },
  //swagger参数定义快捷模板
  "params-template": {
    "prefix": "params-template",
    "body": [
      "{",
      "  type: 'string',",
      "  required: true,",
      "  max: 60,",
      "  example: 'ex',",
      "  description: 'desc',",
      "},"
    ]
  },
  //service快捷模板
  "service-template": {
    "prefix": "service-template",
    "body": [
      "'use strict';",
      "",
      "const Service = require('egg').Service;",
      "",
      "class _objectName_Service extends Service {",
      "  async findAll(payload) {",
      "    const { ctx } = this;",
      "    const { pageSize, pageNumber, prop_order, order } = payload;",
      "    const where = payload.where;",
      "    const Order = [];",
      "    prop_order && order ? Order.push([prop_order, order]) : null;",
      "    const res = await ctx.model.MODEL_NAME.findAndCountAll({",
      "      limit: pageSize,",
      "      offset: (pageSize* (pageNumber - 1))>0?(pageSize* (pageNumber - 1)) : 0,",
      "      raw: true,",
      "      distinct: true,",
      "      where,",
      "      order: Order,",
      "    });",
      "    return {",
      "      data: res.rows,",
      "      pageNumber,",
      "      pageSize,",
      "      total: res.count",
      "    }",
      "  }",
      "",
      "  async findOne(payload) {",
      "    const { ctx } = this;",
      "    return await ctx.model.MODEL_NAME.findOne({ where: payload });",
      "  }",
      "",
      "  async create(payload) {",
      "    const { ctx } = this;",
      "    return await ctx.model.MODEL_NAME.create(payload);",
      "  }",
      "",
      "  async update(payload) {",
      "    const { ctx } = this;",
      "    return await ctx.model.MODEL_NAME.update(payload, { where: { id: payload.id } });",
      "  }",
      "",
      "  async destroy(payload) {",
      "    const { ctx } = this;",
      "    return await ctx.model.MODEL_NAME.destroy({ where: { id: payload.id } });",
      "  }",
      "}",
      "",
      "module.exports = _objectName_Service;"
    ]
  },
  //一键生成restfulApi风格路由
  "restful-router": {
    "prefix": "restful-router",
    "body": [
      "//对象",
      "apiV1Router.post('objects', controller.v1.objects.create);",
      "apiV1Router.put('objects/:id', controller.v1.objects.update);",
      "apiV1Router.get('objects', controller.v1.objects.findAll);",
      "apiV1Router.get('objects/:id', controller.v1.objects.findOne);",
      "apiV1Router.delete('objects/:id', controller.v1.objects.destroy);"
    ]
  },
  //事务
  "transaction-template": {
    "prefix": "transaction-template",
    "body": [
      "const transaction = await ctx.model.transaction();",
      "try {",
      "  await transaction.commit();",
      "  return res;",
      "} catch (e) {",
      "  //异常情况回滚数据库",
      "  await transaction.rollback();",
      "  ctx.logger.error(e);",
      "}"
    ]
  }
}